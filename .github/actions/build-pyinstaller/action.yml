name: build-pyinstaller
description: build-pyinstaller
inputs:
  sourcename: 
    description: 'source file to build'
    required: true
  distname:
    description: 'dist file to save'
    required: true  
  os:  # id of input
    description: 'Operating system'
    required: true
  version:  # id of input
    required: true
outputs:
  artifact-name:
    description: "Artifact Name"
    value: ${{ steps.set-names.outputs.artifact-name }}
  artifact-file:
    description: "Artifact File"
    value: ${{ steps.set-names.outputs.artifact-file }}
  artifact-path:
    description: "Artifact Path"
    value: ${{ steps.set-names.outputs.artifact-name }}/${{ steps.set-names.outputs.artifact-file }}
runs:
  using: "composite"
  steps:
    # - name: Checkout the repo
    #   uses: actions/checkout@v2

    - name: python build
      shell: bash
      run: |
        pip install pyinstaller
        pyinstaller --onefile ${{ inputs.sourcename }} -n ${{ inputs.distname }}
        ls -l dist/
        

    - name: set-names
      id: set-names
      shell: bash
      run: |
        ARTIFACT_NAME=${{ inputs.version }}-${{ inputs.os }}
        echo "artifact_name=${ARTIFACT_NAME}" | tee -a $GITHUB_ENV
        echo "::set-output name=artifact-name::${ARTIFACT_NAME}"
        ARTIFACT_FILE="$(basename dist/${{ inputs.distname }} | sed 's/\(.*\)\..*/\1/')".zip
        echo "artifact_file=${ARTIFACT_FILE}" | tee -a $GITHUB_ENV
        echo "::set-output name=artifact-file::${ARTIFACT_FILE}"
        if command -v powershell; then
          echo "Archiving by powershell"
          powershell Compress-Archive -Path dist/${{ inputs.distname }} -DestinationPath ${ARTIFACT_FILE}
        else
          echo "Archiving by zip"
          zip -v ${ARTIFACT_FILE} dist/${{ inputs.distname }}
        fi
    
    - name: upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.artifact_name }}
        path: |
          ${{ env.artifact_file }}
        retention-days: 1